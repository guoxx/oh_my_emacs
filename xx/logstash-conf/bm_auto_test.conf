input {
    file {
        path => "D:/Batman/BM-AC/UE3/BmGame/**/Launch.log"
        start_position => beginning
        type => "ue3_game_log"
    }

    file {
        path => "D:/Batman/BM-AC/UE4/**/*.log"
        start_position => beginning
        type => "ue4_game_log"
    }

    file {
        path => "D:/Batman/BM-AC/UE3/BmGame/**/_checkmapresults.txt"
        start_position => beginning
        type => "ue3_checkmap_log"
    }

    file {
        path => "D:/Batman/BM-AC/UE3/BmGame/**/Dlg*.csv"
        start_position => beginning
        type => "ue3_err_info_csv"
    }

    file {
        path => "D:/Batman/BM-AC/UE3/BmGame/**/*-CHART-*.csv"
        start_position => beginning
        type => "ue3_fps_chart_csv"
    }

    file {
        path => "D:/Batman/BM-AC/UE4/**/*.ue4statsjson"
        start_position => beginning
        type => "ue4_stats_json"
        codec => json {
            charset => "UTF-8"
        }
    }

    file {
        path => "D:/Batman/BM-AC/UE3/**/*.ue3statsjson"
        start_position => beginning
        type => "ue3_stats_json"
        codec => json {
            charset => "UTF-8"
        }
    }
}

filter {
    if [type] == "ue3_game_log" {
        grok {
            match => [
                "message", "%{WORD:category}"
            ]
        }

#        if [category] == "Log" {
#            drop { }
#        }
    }

    if [type] == "ue4_game_log" {
        grok {
            patterns_dir => "./patterns"
            match => [
                "message", "\[%{UE4_LOG_DATE:utc_date}-%{UE4_LOG_TIME:utc_time}\]\[%{SPACE}%{NUMBER:frame_counter}\]%{SPACE}%{WORD:category}",
                "message", "\[%{UE4_LOG_SINCE_START:log_since_start}\]\[%{SPACE}%{NUMBER:frame_counter}%{SPACE}\]%{WORD:category}"
            ]
        }
        
        # verbose logs only
        if [tags] == "_grokparsefailure" {
            drop { }
        }
    }

    if [type] == "ue3_checkmap_log" {
        grok {
            patterns_dir => "./patterns"
            match => [
                "message", "%{WORD:log_state}%{SPACE}Level:%{SPACE}%{LEVEL_NAME:level}%{SPACE}Actor:%{SPACE}%{ACTOR_NAME:actor}"
            ]
        }

        grok {
            patterns_dir => "./patterns"
            match => [
                "message", "%{ACTOR_NAME:actor}"
            ]
        }
    }

    if [type] == "ue3_err_info_csv" {
        csv {
            columns => [
                "AppSeconds", "State", "LevelName","Chapter", "DetailInformation"
            ]
        }
    }

    if [type] == "ue3_fps_chart_csv" {
        csv {
            columns => [
                "RoomName", "RoomLabel", "FlagName","LoadingTime", "PercentBelow30",
                "FPSFloor", "GPUAverage", "FreeMem(MB)", "FreeGPUMem(MB)", "TextureLoad",
                "PhysicalMemUsed", "VirtualMemUsed", "AudioMemUsed", "TextureMemUsed",
                "NovodexMemUsed", "VertexLightingMemUsed", "StaticMeshVertexMemUsed",
                "StaticMeshIndexMemUsed", "SkeletalMeshVertexMemUsed", "SkeletalMeshIndexMemUsed",
                "VertexShaderMemUsed", "PixelShaderMemUsed", "PhysicalTotal", "GPUTotal",
                "GPUMemUsed", "NumAllocations", "AllocationOverhead", "AllignmentWaste"
            ]
        }

        mutate {
            convert => [
                "LoadingTime", "float",
                "PercentBelow30", "float",
                "FPSFloor", "float",
                "GPUAverage", "float",
                "FreeMem(MB)", "float",
                "FreeGPUMem(MB)", "float",
                "TextureLoad", "float",
                "PhysicalMemUsed", "float",
                "VirtualMemUsed", "float",
                "AudioMemUsed", "float",
                "TextureMemUsed", "float",
                "NovodexMemUsed", "float",
                "VertexLightingMemUsed", "float",
                "StaticMeshVertexMemUsed", "float",
                "StaticMeshIndexMemUsed", "float",
                "SkeletalMeshVertexMemUsed", "float",
                "SkeletalMeshIndexMemUsed", "float",
                "VertexShaderMemUsed", "float",
                "PixelShaderMemUsed", "float",
                "PhysicalTotal", "float",
                "GPUTotal", "float",
                "GPUMemUsed", "float",
                "NumAllocations", "float",
                "AllocationOverhead", "float",
                "AllignmentWaste", "float"
            ]
        }
    }

    if [type] == "ue4_stats_json" {
        grok {
            match => [
                "path", "%{GREEDYDATA}/%{GREEDYDATA:filename}.ue4statsjson"
            ]
        }

        grok {
            match => [
                "filename", "%{DATA:level}-%{DATA:platform}-"
            ]
        }
   }

   if [type] == "ue3_stats_json" {
        grok {
            match => [
                "path", "%{GREEDYDATA}/%{GREEDYDATA:filename}.ue3statsjson"
            ]
        }

        grok {
            match => [
                "filename", "%{DATA:level}-%{DATA}-%{DATA:platform}-"
            ]
        }
    }
}

output {
    if [type] == "ue3_game_log" or [type] == "ue4_game_log" {
        elasticsearch {
            host => "localhost"
            cluster => "bm_elasticsearch"
            index => "logs"
        }
    }

    if [type] == "ue3_checkmap_log" or [type] == "ue3_err_info_csv"{
        elasticsearch {
            host => "localhost"
            cluster => "bm_elasticsearch"
            index => "errors"
        }
    }

    if [type] == "ue3_fps_chart_csv" {
        elasticsearch {
            host => "localhost"
            cluster => "bm_elasticsearch"
            index => "summary"
        }
    }

    if [type] == "ue3_stats_json" or [type] == "ue4_stats_json" {
        elasticsearch {
            host => "localhost"
            cluster => "bm_elasticsearch"
            index => "stats"
        }
    }
}
